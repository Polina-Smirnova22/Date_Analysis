function fetchDailyCampaignStatistics() {
 const ss            = SpreadsheetApp.getActiveSpreadsheet();
 const techSheet     = ss.getSheetByName('–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π');
 const outSheetName  = '–û–∑–æ–Ω –†–µ–∫–ª–∞–º–∞ –î–Ω–µ–≤–Ω–∞—è';

 if (!techSheet)
   throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω –ª–∏—Å—Ç "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π".');

 const dateFrom = formatDateForApi(techSheet.getRange('J2').getValue());
 const dateTo   = formatDateForApi(techSheet.getRange('K2').getValue());
 if (!dateFrom || !dateTo)
   throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç –≤ J2-K2 (–æ–∂–∏–¥–∞–µ—Ç—Å—è –¥–¥.–ú–ú.–≥–≥–≥–≥ –∏–ª–∏ –¥–∞—Ç–∞).');

 const token = checkAndRefreshToken();
 if (!token) throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω Performance-API.');

 const out = ss.getSheetByName(outSheetName) || ss.insertSheet(outSheetName);
 out.clear();
 out.appendRow([
   'Campaign ID', 'Title', 'Date',
   'Views', 'Clicks', 'Spent, ‚ÇΩ',
   'Avg Bid, ‚ÇΩ', 'Orders', 'Orders Money, ‚ÇΩ'
 ]);


 const url = 'https://api-performance.ozon.ru/api/client/statistics/daily/json' +
             '?dateFrom=' + encodeURIComponent(dateFrom) +
             '&dateTo=' + encodeURIComponent(dateTo);

 Logger.log('GET ' + url);

 const resp = UrlFetchApp.fetch(url, {
   method : 'get',
   headers: perfHeaders(token),          
   muteHttpExceptions: true,
 });


 const code = resp.getResponseCode();
 const body = resp.getContentText();


 if (code !== 200) {
   Logger.log('–û—à–∏–±–∫–∞ HTTP ' + code + ': ' + body);
   return;
 }

 let json;
 try {
   json = JSON.parse(body);
 } catch (err) {
   Logger.log('–û—à–∏–±–∫–∞ JSON: ' + err.message);
   return;
 }

 const arr = json.content || json.data || json.rows || [];
 Logger.log('–ü–æ–ª—É—á–µ–Ω–æ —Å—Ç—Ä–æ–∫: ' + arr.length);
 if (!arr.length) return;

 const rows = arr.map(r => [
   r.campaignId || r.id || '',
   r.title      || '',
   r.date       || '',
   r.views      || 0,
   r.clicks     || 0,
   r.moneySpent || 0,
   r.avgBid     || 0,
   r.orders     || 0,
   r.ordersMoney|| 0
 ]);


 out.getRange(2, 1, rows.length, rows[0].length).setValues(rows);
 Logger.log('üü¢ –ó–∞–ø–∏—Å–∞–Ω–æ —Å—Ç—Ä–æ–∫: ' + rows.length);
}

function formatDateForApi(val) {
 if (val instanceof Date)
   return Utilities.formatDate(val, Session.getScriptTimeZone(), 'yyyy-MM-dd');
 const p = String(val).trim().split('.');
 return p.length === 3 ? `${p[2]}-${p[1]}-${p[0]}` : null;
}

function perfHeaders(token) {
     const tech = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π');
     return {
       'Authorization': 'Bearer ' + token,
       'Client-Id'    : String(tech.getRange('B4').getValue()).trim(),
       'Api-Key'      : String(tech.getRange('B5').getValue()).trim()
     };
   }
function checkAndRefreshToken() {
var sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π');
var clientId = String(sheet.getRange('B4').getValue()).trim();
var clientSecret = String(sheet.getRange('B5').getValue()).trim();
var tokenCell = sheet.getRange('B6');
var lastTokenTime = tokenCell.getNote();
var currentTime = new Date().getTime();

Logger.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞. –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: ' + currentTime + ', –≤—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: ' + lastTokenTime);

if (lastTokenTime && currentTime - parseInt(lastTokenTime) < 1800000) {
  Logger.log('–¢–æ–∫–µ–Ω –µ—â–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω.');
  return tokenCell.getValue();
}

Logger.log('–¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω.');

var url = 'https://api-performance.ozon.ru/api/client/token';
var payload = {
  'client_id': clientId,
  'client_secret': clientSecret,
  'grant_type': 'client_credentials'
};

var options = {
  'method': 'post',
  'contentType': 'application/json',
  'muteHttpExceptions': true,
  'payload': JSON.stringify(payload)
};

var response = UrlFetchApp.fetch(url, options);
var jsonResponse = JSON.parse(response.getContentText());

if (jsonResponse.access_token) {
  Logger.log('–ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: ' + jsonResponse.access_token);
  tokenCell.setValue(jsonResponse.access_token);
  tokenCell.setNote(String(currentTime));
  return jsonResponse.access_token;
} else {
  Logger.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: ' + JSON.stringify(jsonResponse));
  return null;
}
}








