# -*- coding: utf-8 -*-
"""3. A/B-test.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mnWvm_sWmBsRn1UiyyQvIqnuNc7XxsIH

Загружаем все необходимые библиотеки и датасеты с рекламными кампаниями.
"""

# импортируем необходимые библиотеки
import pandas as pd
import datetime
from datetime import date, timedelta
import plotly.graph_objects as go
import plotly.express as px
import plotly.io as pio
pio.templates.default = 'plotly_white'

control_data = pd.read_csv('/content/Control.csv', sep=';')
test_data = pd.read_csv('/content/Test.csv', sep=';')
control_data.head()

"""Рис. 1: Датасет с данными контрольной кампании"""

test_data.head()

"""Рис. 2: Датасет с данными тестовой кампании

Посмотрим на размеры датасетов.
"""

print('В датасете №1 строк/колонок:', control_data.shape)
print('В датасете №2 строк/колонок:', test_data.shape)

"""Проверяем данные на количество NaN значений."""

control_data.isnull().sum()

test_data.isnull().sum()

"""Проверяем типы данных столбцов."""

print(control_data.dtypes)
print(test_data.dtypes)

"""Видим, что оба датасета имеют одинаковое число строк и столбцов, а также одинаковый тип данных. Однако в названиях столбцов есть ошибки и лишние символы."""

control_data.columns = ['group', 'ddate', 'views',
                        'clicks', 'spent', 'basket',
                        'orders', 'orders_money']

test_data.columns = ['group', 'ddate', 'views',
                        'clicks', 'spent', 'basket',
                        'orders', 'orders_money']

print(control_data.columns)
print(test_data.columns)

"""Объединим эти две таблицы. Создадим новый датасет ab_data."""

ab_data = control_data.merge(test_data, how='outer').sort_values(['ddate'])
ab_data = ab_data.reset_index(drop=True)
ab_data.head()

"""Рис. 3: Объединенный датасет с контрольными и тестовыми значениями ab_data

Видим что объединение таблиц прошло успешно. Однако на всякий случай посчитаем количество значений в столбце group.
"""

ab_data['group'].value_counts()

"""Число строк для контрольной и тестовой кампании совпадают. Приступаем к A/B-тестам наших данных.

**Визуальный анализ результатов A/B-теста**

Проводим визуальный анализ различий ключевых метрик рекламных кампаний. Рассмотрим соотношения между количеством показов, которые мы получили от обеих кампаний, и суммой, потраченной на обе кампании.
"""

figure = px.scatter(data_frame = ab_data, x='views',
                    y='spent', size='spent',
                    color= 'group', trendline='ols')
figure.show()

"""Рис. 4: Диаграмма рассеяния с линиями тренда сумм затрат на рекламу и числа показов

На диаграмме выше синие кружки — это контрольная кампания. Красные кружки — это тестовая кампания.

Основные тезисы по диаграмме:


*   Линия тренда для каждой кампании подтверждает заввисимость, чем больше денег
потрачено на рекламу, тем больше просмотров она получает.
*   Кампания B (красные точки) в целом показывает более высокую эффективность. При меньших расходах она получает больше просмотров по сравнению с кампанией A.
*   На графике видны некоторые точки, которые сильно отклоняются от общей тенденции. Например, у кампании A есть точка с очень высокими расходами (около 25k), но относительно небольшим количеством просмотров (около 50k). Это может указывать на неэффективное использование бюджета в этом конкретном случае. У кампании B также есть точка с высокими расходами (около 20k), но просмотры составляют около 150k, что является хорошим результатом.

Теперь давайте посмотрим на количество показов в рамках обеих кампаний.
"""

label = ['Кол-во показов с контрольной кампании', 'Кол-во показов с тестовой кампании']
counts = [sum(control_data['views']),
          sum(test_data['views'])]
colors = ['gold','lightgreen']
fig = go.Figure(data=[go.Pie(labels=label, values=counts)])
fig.update_layout(title_text='Показы')
fig.update_traces(hoverinfo='label+percent', textinfo='value',
                  textfont_size=24, marker=dict(colors=colors,
                  line=dict(color='black', width=3)))
fig.show()

"""Рис. 5: Круговая диаграмма сравнения числа показов в контрольной и тестовой рекламной кампании

По графику выше мы видим, что тестовая кампания генерировала больше показов (938 108 против 727 8837)

Теперь давайте посмотрим на количество кликов по карточкам в обеих кампаниях.
"""

label = ['Кол-во кликов с контрольной кампании', 'Кол-во кликов с тестовой кампании']
counts = [sum(control_data['clicks']),
          sum(test_data['clicks'])]
colors = ['gold','lightgreen']
fig = go.Figure(data=[go.Pie(labels=label, values=counts)])
fig.update_layout(title_text='Клики')
fig.update_traces(hoverinfo='label+percent', textinfo='value',
                  textfont_size=24, marker=dict(colors=colors,
                  line=dict(color='black', width=3)))
fig.show()

"""Рис. 6: Круговая диаграмма сравнения числа кликов по карточке в контрольной и тестовой рекламной кампании

И здесь тестовая кампания явно сработала лучше (18 904 против 14 700).

Теперь давайте посмотрим на количество товаров, добавленных в корзину в обеих кампаниях.
"""

label = ['Добавлений в корзину с контрольной кампании', 'Добавлений в корзину с тестовой кампании']
counts = [sum(control_data['basket']),
          sum(test_data['basket'])]
colors = ['gold','lightgreen']
fig = go.Figure(data=[go.Pie(labels=label, values=counts)])
fig.update_layout(title_text='Добавление товаров в корзину')
fig.update_traces(hoverinfo='label+percent', textinfo='value',
                  textfont_size=24, marker=dict(colors=colors,
                  line=dict(color='black', width=3)))
fig.show()

"""Рис. 7: Круговая диаграмма сравнения количества событий добавления товаров в Корзину по контрольной и тестовой кампании

А вот по данной метрике уже разница между кампаниями куда более существенная (5 509 против 4 219).

Теперь давайте посмотрим на суммы, потраченные на обе кампании.
"""

label = ['Потрачено на рекламу в котрольной кампании', 'Потрачено на рекламу в тестовой кампании']
counts = [sum(control_data['spent']),
          sum(test_data['spent'])]
colors = ['gold','lightgreen']
fig = go.Figure(data=[go.Pie(labels=label, values=counts)])
fig.update_layout(title_text='Рекламные затраты')
fig.update_traces(hoverinfo='label+percent', textinfo='value',
                  textfont_size=24, marker=dict(colors=colors,
                  line=dict(color='black', width=3)))
fig.show()

"""Рис. 8: Круговая диаграмма сравнения рекламных затрат на контрольную и тестовую кампании

Видим что на тестовую кампанию было потрачено больше средств, чем на контрольную (182 827 против 147 981). Однако поскольку в результате контрольной кампании было больше просмотров контента и больше товаров положено в корзину, мы можем сделать вывод что контрольная кампания более эффективна, чем тестовая.

Давайте также взглянем какая рекламная кампания привела к большему числу покупок с сайта.
"""

label = ['Количество заказов в котрольной кампании', 'Количество заказов в тестовой кампании']
counts = [sum(control_data['orders']),
          sum(test_data['orders'])]
colors = ['gold','lightgreen']
fig = go.Figure(data=[go.Pie(labels=label, values=counts)])
fig.update_layout(title_text='Заказы')
fig.update_traces(hoverinfo='label+percent', textinfo='value',
                  textfont_size=24, marker=dict(colors=colors,
                  line=dict(color='black', width=3)))
fig.show()

"""Рис. 9: Круговая диаграмма сравнения числа заказов с контрольной и тестовой кампании

Увеличение количества заказов на 269 (2456 - 2187) может свидетельствовать о том, что изменения, внесенные в тестовую кампанию, были эффективными.Тестовая кампания показала на 12.30% больше заказов по сравнению с контрольной кампанией.

Теперь давайте проанализируем некоторые показатели, чтобы выяснить, какая рекламная кампания приносит больше конверсий. Для этого давайте рассмотрим взаимосвязь между числом кликов по карточке и просмотренным контентом в обеих рекламных кампаниях.
"""

figure = px.scatter(data_frame=ab_data, x='views',
                    y='clicks', size='clicks',
                    color='group', trendline='ols')
figure.show()

"""Рис. 10: Диаграмма рассеяния с линиями тренда кликов на карточку и количества просмотров для сравнения эффективности между тестовой и контрольной рекламными кампаниями

Группа B (красные точки и линия) имеет более высокую тенденцию к увеличению кликов по сравнению с группой A (синие точки и линия). Это может указывать на то, что контент и стратегия продвижения группы B более эффективна в привлечении кликов.

Давайте также проанализурем взаимосвязь между количеством просмотренного контента и количеством товаров, добавленных в корзину в обеих кампаниях.
"""

figure = px.scatter(data_frame=ab_data, x='basket',
                    y='views', size='basket',
                    color='group', trendline='ols')
figure.show()

"""Рис. 11: Диаграмма рассеяния с линиями тренда количества событий добавления в Корзину и числа просмотров карточек

Группа B (красные точки и линия) имеет более высокую тенденцию к увеличению просмотров по сравнению с группой A (синие точки и линия).

Выводы:

*   В результате проведенных A/B-тестов мы обнаружили, что тестовая кампания привела к увеличению заказов и вовлеченности посетителей;
*   конверсия в покупку в тестовой кампании несколько выше;
*   таким образом, тестовая кампания может быть использована для более эффективного продвижения товаров.

**Статистический анализ результатов A/B-теста**

После визуального анализа различий между контрольной и тестовой группами важно провести строгий статистический анализ, чтобы определить, являются ли наблюдаемые различия статистически значимыми.
"""

import numpy as np
import pandas as pd
import scipy.stats as stats
import seaborn as sns
import matplotlib.pyplot as plt
from statsmodels.stats.proportion import proportions_ztest
from datetime import datetime, timedelta

# Функция для расчета конверсии
def calculate_conversion_metrics(data):
    # Проверяем наличие столбца 'views' и обрабатываем деление на ноль
    metrics = pd.DataFrame()
    metrics['CTR'] = np.where(data['views'] > 0, data['clicks'] / data['views'] * 100, 0)

    # Аналогично проверяем остальные метрики
    metrics['CR_cart'] = np.where(data['clicks'] > 0, data['basket'] / data['clicks'] * 100, 0)
    metrics['CR_purchase'] = np.where(data['clicks'] > 0, data['orders_money'] / data['clicks'] * 100, 0)
    metrics['CPC'] = np.where(data['clicks'] > 0, data['spent'] / data['clicks'], 0)

    # Для ROI используем аналогичную проверку
    metrics['ROI'] = np.where(data['spent'] > 0, ((data['orders_money'] * 100 - data['spent']) / data['spent'] * 100), 0)

    return metrics

# Рассчитываем метрики для обеих групп
control_metrics = calculate_conversion_metrics(control_data)
test_metrics = calculate_conversion_metrics(test_data)

# Функция для проведения t-теста
def perform_ttest(metric_control, metric_test, metric_name):
    t_stat, p_value = stats.ttest_ind(metric_control, metric_test)
    print(f"\nT-тест для метрики {metric_name}:")
    print(f"t-статистика: {t_stat:.4f}")
    print(f"p-значение: {p_value:.4f}")
    print(f"Статистически значимое различие: {p_value < 0.05}")

# Расчет размера эффекта (Cohen's d)
    cohens_d = (np.mean(metric_test) - np.mean(metric_control)) / \
               np.sqrt((np.std(metric_test)**2 + np.std(metric_control)**2) / 2)
    print(f"Размер эффекта (Cohen's d): {cohens_d:.4f}")

# Проведем t-тесты для основных метрик
metrics_to_test = ['CTR', 'CR_cart', 'CR_purchase', 'CPC', 'ROI']
for metric in metrics_to_test:
    perform_ttest(control_metrics[metric], test_metrics[metric], metric)

# Визуализация распределения конверсий
plt.figure(figsize=(15, 10))
for i, metric in enumerate(['CTR', 'CR_cart', 'CR_purchase'], 1):
    plt.subplot(2, 2, i)
    sns.kdeplot(data=control_metrics[metric], label='Control', color='blue')
    sns.kdeplot(data=test_metrics[metric], label='Test', color='red')
    plt.title(f'Distribution of {metric}')
    plt.legend()
plt.tight_layout()

"""Рис. 12: Графики распределения контрольной и тестовых выборок по значениям CTR, Добавления в Корзину, Заказов (синяя линия — контрольная кампания, красная линия — тестовая)"""

# Расчет доверительных интервалов
def calculate_confidence_intervals(metric_control, metric_test, metric_name):
    control_mean = np.mean(metric_control)
    test_mean = np.mean(metric_test)
    control_ci = stats.t.interval(0.95, len(metric_control)-1,
                                loc=control_mean,
                                scale=stats.sem(metric_control))
    test_ci = stats.t.interval(0.95, len(metric_test)-1,
                              loc=test_mean,
                              scale=stats.sem(metric_test))
    return pd.DataFrame({
        'Group': ['Control', 'Test'],
        'Mean': [control_mean, test_mean],
        'CI_lower': [control_ci[0], test_ci[0]],
        'CI_upper': [control_ci[1], test_ci[1]]
    })

# Расчет и визуализация доверительных интервалов для конверсии в покупку
ci_data = calculate_confidence_intervals(control_metrics['CR_purchase'],
                                      test_metrics['CR_purchase'],
                                      'Purchase Conversion Rate')

plt.figure(figsize=(10, 6))
plt.errorbar(ci_data['Mean'], ci_data['Group'],
            xerr=[(ci_data['Mean'] - ci_data['CI_lower']),
                  (ci_data['CI_upper'] - ci_data['Mean'])],
            fmt='o', capsize=5)
plt.title('95% Confidence Intervals for Purchase Conversion Rate')
plt.xlabel('Conversion Rate (%)')
plt.grid(True)

"""Рис. 13: 95% доверительные интервалы по конверсии в заказы товаров по контрольной и тестовой кампании

t-тест используется для проверки статистической значимости различия средних значений двух выборок.

**Метрика CTR (Click-through Rate)**

t-статистика: −0.3968

p-значение: 0.6924 > 0.05 → Нет статистически значимого различия.

Размер эффекта: 0.0802 → Очень слабый размер эффекта.

Интерпретация: Различия в среднем показателе кликов между группами практически отсутствуют и являются незначительными.


**Метрика CR_cart (Conversion Rate to Cart)**

t-статистика: −0.3091

p-значение: 0.7579 > 0.05 → Нет статистически значимого различия.

Размер эффекта: 0.0625 → Очень слабый размер эффекта.

Интерпретация: Между группами нет существенного различия в показателях конверсии добавления товаров в корзину.


**Метрика CR_purchase (Conversion Rate to Purchase)**

t-статистика: 0.4330

p-значение: 0.6659 > 0.05 → Нет статистически значимого различия.

Размер эффекта: −0.0875 → Очень слабый отрицательный размер эффекта.

Интерпретация: Показатели конверсии покупок также близки друг другу, никаких существенных отличий между группами не обнаружено.


**Метрика CPC (Cost Per Click)**

t-статистика: −0.0079

p-значение: 0.9937 > 0.05 → Нет статистически значимого различия.

Размер эффекта: 0.0016 → Чрезвычайно малый положительный размер эффекта.

Интерпретация: Стоимость каждого клика примерно одинакова в обеих группах, значимых различий нет.


**Метрика ROI (Return on Investment)**

t-статистика: 1.1827

p-значение: 0.2398 > 0.05 → Нет статистически значимого различия.

Размер эффекта: −0.2389 → Средний отрицательный размер эффекта.

Интерпретация: Хотя наблюдается небольшой отрицательный тренд в рентабельности инвестиций, этот эффект не является статистически значимым, следовательно, можно считать показатели равнозначными.

На рисунке 13 представлены 95% доверительные интервалы для коэффициентов конверсии в покупку (Purchase Conversion Rate) для двух групп: тестовой (Test) и контрольной (Control). Доверительные интервалы не пересекаются, что на первый взгляд может указывать на статистически значимое различие между группами. Однако результаты T-теста показывают, что различие не является статистически значимым.


Несмотря на то, что доверительные интервалы на графике не пересекаются, результаты T-теста показывают, что различие между группами не является статистически значимым.
Размер эффекта очень мал, что указывает на незначительное различие между группами.

**Общий вывод**

Ни одна из рассматриваемых метрик не показала статистически значимую разницу между группами. Это означает, что любые изменения, произведённые в рамках эксперимента, не оказали заметного влияния на исследуемые показатели. Размер эффектов крайне мал или даже отсутствует, что подтверждает отсутствие практических последствий изменений.
"""